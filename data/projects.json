[
    {
    "title": "Qalam - LMS",
    "featuredText": "Qalam is a learning management system for university students.",
    "projectUrl": "",
    "description": "Qalam-LMS is a learning management system tailored for university students, built on Node.js/Express.js with MySQL as the backend database and Sequelize ORM for database operations. It offers user registration and login functionalities, enabling students to create accounts and access the platform's features seamlessly. Admins can utilize the admin panel to manage courses by creating, uploading content, and deleting them. Students can log in to enroll in courses, manage their profiles, and access course materials for download. The system features a responsive dashboard displaying active courses, progress tracking for ongoing/completed courses, and additional tools like a calendar for scheduling. Qalam-LMS aims to streamline academic processes, facilitate communication between students and instructors, and provide a user-friendly interface accessible across devices.",
    "githubUrl": "https://github.com/Grimmer107/Qalam-LMS",
    "year": "2022",
    "featuredImage": "/Qalam-1.jpg",
    "video": "",
    "images": ["/Qalam-1.jpg", "/Qalam-2.jpg", "/Qalam-3.jpeg", "/Qalam-4.jpg", "/Qalam-5.jpg", "/Qalam-6.jpg"],
    "stack": ["JavaScript", "Node", "Express", "MySQL", "Sequelize", "EJS"]
    },
    {
        "title": "Distributed File System",
        "featuredText": "It is a multi-threaded distributed file system for storage across servers.",
        "projectUrl": "",
        "description": "It is a multi-threaded distributed file system that leverages the underlying operating system's filesystem for fundamental operations like file and directory management, reading, writing, deleting, and renaming. It boasts advanced features such as fault tolerance and distributed storage. Drawing inspiration from Google File System (GFS), its architecture comprises master and slave servers, with a central server overseeing data storage across multiple storage servers. To ensure synchronization between storage servers and the central server, the Berkeley Algorithm is employed. This algorithm involves the central server polling storage servers for their time, calculating the average time difference, and adjusting the central server's time accordingly. The corrected time is then used to compute time corrections for each storage server, which are subsequently communicated to the respective servers.",
        "githubUrl": "https://github.com/Grimmer107/distributed_file_system",
        "year": "2023",
        "featuredImage": "/distributed-filesystem.png",
        "video": "",
        "images": ["/distributed-filesystem.png"],
        "stack": ["Python"]
    },
    {
    "title": "Search Engine",
    "featuredText": "It is a search engine built on top of json files as corpus of text.",
    "projectUrl": "",
    "description": "'Talaash' is a Python-based search engine designed to emulate the functionality of Google, following principles outlined in Google research paper. Utilizing JSON files as its dataset, the engine employs a comprehensive indexing process. This involves parsing JSON files, removing stopwords, and stemming words using the Snowball Stemmer. The resulting forward index is partitioned into forward barrels, while a sorter reorganizes them into inverted index barrels. Concurrently, metadata about indexed documents is stored in a file named 'DocumentIndex,' and word metadata is stored in a 'lexicon' file. During searches, user-entered queries undergo similar preprocessing, with stopwords removed and words stemmed. The engine then searches the lexicon to locate relevant documents in the inverted index, retrieving hitlists of matching documents. These documents are ranked based on relevance, considering factors like word position and frequency within documents. Multi-word queries also undergo proximity analysis to further refine relevance. Finally, documents are sorted by their Information Retrieval (IR) Score, which combines various relevance metrics, and presented as clickable links to users. The project requires specific directory structures and includes a sample dataset in the 'data' folder for testing purposes.",
    "githubUrl": "https://github.com/Grimmer107/Search-Engine",
    "year": "2021",
    "featuredImage": "/search-engine.png",
    "video": "",
    "images": ["/search-engine.png"],
    "stack": ["Python", "Nltk", "Tkinter"]
    }
]